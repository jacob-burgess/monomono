{
	"compilerOptions": {
		/* Base Options: */
		"esModuleInterop": true, // Helps mend a few of the fences between CommonJS and ES Modules.
		"skipLibCheck": true, // Skips checking the types of .d.ts files. This is important for performance, because otherwise all node_modules will be checked.
		"target": "es2022", // The version of JavaScript you're targeting. I recommend es2022 over esnext for stability.
		"allowJs": true, // Allows you to import .js and .json files. Always useful.
		"resolveJsonModule": true, // Allows you to import .json files. Always useful.
		"moduleDetection": "force", // This option forces TypeScript to consider all files as modules. This helps to avoid 'cannot redeclare block-scoped variable' errors.
		"isolatedModules": true, // This option prevents a few TS features which are unsafe when treating modules as isolated files.
		"verbatimModuleSyntax": true, // This option forces you to use import type and export type, leading to more predictable behavior and fewer unnecessary imports. With module: NodeNext, it also enforces you're using the correct import syntax for ESM or CJS.

		/* Strictness */
		"strict": true, // Enables all strict type checking options. Indispensable.
		"noUncheckedIndexedAccess": true, // Prevents you from accessing an array or object without first checking if it's defined. This is a great way to prevent runtime errors, and should really be included in strict.
		"noImplicitOverride": true, // Makes the override keyword actually useful in classes.

		/* If transpiling with TypeScript: */
		// "module": "NodeNext", // Tells TypeScript what module syntax to use. NodeNext is the best option for Node.
		// "outDir": "dist", // Tells TypeScript where to put the compiled JavaScript files. dist is my preferred convention, but it's up to you.
		// "sourceMap": true, // Tells TypeScript to emit source maps. This is needed so that when consumers of your libraries are debugging, they can jump to the original source code using go-to-definition.

		/* AND if you're building for a library: */
		"declaration": true, // Tells TypeScript to emit .d.ts files. This is needed so that libraries can get autocomplete on the .js files you're creating.

		/* AND if you're building for a library in a monorepo: */
		"composite": true, // Tells TypeScript to emit .tsbuildinfo files. This tells TypeScript that your project is part of a monorepo, and also helps it to cache builds to run faster.
		"declarationMap": true, // Tells TypeScript to emit declaration maps. This is needed so that when consumers of your libraries are debugging, they can jump to the original source code using go-to-definition.

		/* If NOT transpiling with TypeScript: */
		"module": "preserve", // preserve is the best option because it most closely mimics how bundlers treat modules.
		"noEmit": true, // Tells TypeScript not to emit any files. This is important when you're using a bundler so you don't emit useless .js files.

		/* If your code runs in the DOM: */
		"lib": ["es2022", "dom", "dom.iterable"] // Tells TypeScript what built-in types to include. es2022 is the best option for stability. dom and dom.iterable give you types for window, document etc.

		/* If your code doesn't run in the DOM: */
		// "lib": ["es2022"] // These are the same as above, but without the dom and dom.iterable typings.
	}
}
